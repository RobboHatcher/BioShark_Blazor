<!--Blazor Index Page-->
@page "/"

<!--Using statements necessary before html for inline C# code-->
@using System;
@using BioShark_Blazor.Data;
@using static BioShark_Blazor.Data.Machine;
@using BioShark_Blazor.Pages.ProcessButtons;
@using BioShark_Blazor.Pages.Components;

<!--Singular objects used throughout the webpage are injected.
    Look at Program.cs and Startup.cs for their implementation.-->
@inject Machine _machine
@inject ADC _adc
@inject FileIO _fileWriter

<!--Begin webpage design-->
<h1>BioShark Control Panel</h1>
<div class="container-fluid">
    <div class="row text-center">
        <!--Separate component for listing readings because we use that in different webpages-->
        <ReadingsComponent/>
        <div class="col-lg-4 text-center">
            <h3>Manual Part Control</h3>
            
            <input @bind="roomSize"/>
            <button class="btn btn-primary" @onclick="@(CalculateRoomMass)"></button>
            <table class="col-lg">
            <!--Populate bootstrap class dictionary with default styles-->
            @foreach(int val in Enum.GetValues(typeof(OutputPins)))
            {
                string localName = Enum.GetName(typeof(OutputPins), val);
                int locali = val;
                try{
                    systemButtonStyle.Add(val, "btn btn-primary");
                } catch (ArgumentException) {
                    
                }
            }

            
            <!--Buttons-->
            <tr>
                <td style="padding:10px"><button class="@systemButtonStyle[(int)OutputPins.Cat]" @onclick="@(()=>PressSensorButton((int)OutputPins.Cat))">Catalyst Fan</button></td>
                <td style="padding:10px"><button class="@systemButtonStyle[(int)OutputPins.MistFan]" @onclick="@(()=>PressSensorButton((int)OutputPins.MistFan))">Mister Fan</button></td> 
            </tr>
            <tr >
                <td style="padding:10px"><button class="@systemButtonStyle[(int)OutputPins.Sidekick]" @onclick="@(()=>PressSensorButton((int)OutputPins.Sidekick))">Sidekick</button></td>
                <td style="padding:10px"><button class="@systemButtonStyle[(int)OutputPins.Heat]" @onclick="@(()=>PressSensorButton((int)OutputPins.Heat))">Heaters</button></td> 
            </tr>
            <tr>
                <td style="padding:10px"><button class="@systemButtonStyle[(int)OutputPins.FillPump]" @onclick="@(()=>PressSensorButton((int)OutputPins.FillPump))" disabled>Fill Pump</button></td>
                <td style="padding:10px"><button class="@systemButtonStyle[(int)OutputPins.Distribution]" @onclick="@(()=>PressSensorButton((int)OutputPins.Distribution))">Distribution Fan</button></td> 
            </tr>
            <tr>
                <td style="padding:10px"><button class="@systemButtonStyle[(int)OutputPins.RunPump]" @onclick="@(()=>PressSensorButton((int)OutputPins.RunPump))" disabled>Run Pump</button></td>
                <td style="padding:10px"><button class="@systemButtonStyle[(int)OutputPins.HRCat]" @onclick="@(()=>PressSensorButton((int)OutputPins.HRCat))">HRCat Fan</button></td> 
            </tr>
            <tr>
                <td style="padding:10px"><button class="@systemButtonStyle[(int)OutputPins.Mist]" @onclick="@(()=>PressSensorButton((int)OutputPins.Mist))">Mister</button></td>
                <td style="padding:10px"><button class="@systemButtonStyle[(int)OutputPins.LRCat]" @onclick="@(()=>PressSensorButton((int)OutputPins.LRCat))">LRCat Fan</button></td> 
            </tr>
            <tr>
                <td style="padding:10px"><button class="@systemButtonStyle[(int)OutputPins.Blower]" @onclick="@(()=>PressSensorButton((int)OutputPins.Blower))">Blowers</button></td>
                <td style="padding:10px"><button class="@systemButtonStyle[(int)OutputPins.Drainpump]" @onclick="@(()=>PressSensorButton((int)OutputPins.Drainpump))">Drain Pump</button></td> 
            </tr>
            </table>
        </div>

        <!--Buttons for automatic procedures-->
        <div class="col-lg-4 text-center">
            <h3>Automatic Procedures</h3>
             <table class="col-lg">
                <tr style="padding:10px"><button class="@processButtonStyle[processController.runPump]" @onclick="@(()=>ProcessToggle(processController.runPump))">Run Pump w/ Auto-Off</button></tr>
                <tr style="padding:10px"><button class="@processButtonStyle[processController.lowRangeOscillator]" @onclick="@(()=>ProcessToggle(processController.lowRangeOscillator))">LR Oscillator</button></tr>
                <tr style="padding:10px"><button class="@processButtonStyle[processController.drainPump]" @onclick="@(()=>ProcessToggle(processController.drainPump))">Drain Pump w/ Auto-Off</button></tr>
                <tr style="padding:10px"><button class="@processButtonStyle[processController.fillPump]" @onclick="@(()=>ProcessToggle(processController.fillPump))">Fill Pump</button></tr>
                <br/>
                <tr style="padding:10px"><button class="@processButtonStyle[processController.autoCycle]" @onclick="@(()=>processController.autoCycle.StartProcess())">Auto Cycle</button></tr>
                <tr style="padding:10px"><button class="btn btn-info btn-block">Early Stop Cycle</button></tr>
                <tr style="padding:10px"><button class="btn btn-danger btn-block" @onclick="@(()=>EmergencyStop())">Emergency Stop Cycle</button></tr>
                <tr style="padding:10px"><td>@MassDischarged.ToString()</td><td>Grams Discharged</td></tr>
             </table>
        </div>
    </div>
</div>

@code{
    private Dictionary<int,string> systemButtonStyle;

    private Dictionary<IProcessButton,string> processButtonStyle;
    ProcessController processController;
    private enum ButtonTypes {runPumpButton,LROButton,DrainButton,FillButton,AutoCycle}
    private int roomSize;
    
    public double MassDischarged = 0;
    protected override void OnInitialized()
    {
        // OnInitialized needs to be overridden from the default page class to
        // populate data structures after the page has loaded.

        base.OnInitialized();
        systemButtonStyle = new Dictionary<int,string>();
        
        processController = new ProcessController(_machine, _adc);
        processButtonStyle = new Dictionary<IProcessButton, string>();
        processButtonStyle.Add(processController.runPump, processController.runPump.GetButtonClass());
        processButtonStyle.Add(processController.lowRangeOscillator, processController.lowRangeOscillator.GetButtonClass());
        processButtonStyle.Add(processController.drainPump, processController.runPump.GetButtonClass());
        processButtonStyle.Add(processController.fillPump, processController.runPump.GetButtonClass());
        processButtonStyle.Add(processController.autoCycle, processController.runPump.GetButtonClass());

        _machine.ButtonStyleTrigger += UpdateButtonStyles; // This causes all pin changes to trigger page updates.
        _fileWriter.Initialize(_machine, _adc, processController);
        UpdateButtonStyles();
    }


    private void CalculateRoomMass()
    {
        _machine.targetMass = roomSize * Constants.HPMassFraction6Log / Constants.targetMassConst;
        Console.WriteLine("Target mass: " + _machine.targetMass);
    }

    private void PressSensorButton(int i)
    {
        // Toggles the pin that the button controls.
        if(_machine.IsOn(i))
        {
            _machine.TurnOff(i);
        }

        else {
            _machine.TurnOn(i);
        }
        
    }

    private void ProcessToggle( IProcessButton button)
    {
        
        if(!button.GetProcessState())
        {
            button.StartProcess();
        }
        else button.EndProcess();

        // Additionally, update the buttons with their classes.
        UpdateButtonStyles();
    }


    private void EmergencyStop()
    {
        // Stop all processes
        processController.StopAllProcesses();
        _machine.TurnAllOff();
    }

    private void UpdateButtonStyles()
    {
        foreach(int val in Enum.GetValues(typeof(OutputPins)))
        {
            if(_machine.IsOn(val))
            {
                systemButtonStyle[val] = "btn btn-warning btn-block";
            }
            else systemButtonStyle[val] = "btn btn-primary btn-block";
        }

        // The following could probably be organized better but it's simple
        // to understand.
        UpdateProcessStyle(processController.runPump);
        UpdateProcessStyle(processController.lowRangeOscillator);
        UpdateProcessStyle(processController.fillPump);
        UpdateProcessStyle(processController.drainPump);
        UpdateProcessStyle(processController.autoCycle);
        MassDischarged=Math.Round(processController.autoCycle.MassDischarged, 2);
        Task.Run(async()=> await InvokeAsync(()=>this.StateHasChanged()));
    }
    

    private void UpdateProcessStyle(IProcessButton process){
        processButtonStyle[process] = process.GetButtonClass();
    }

}